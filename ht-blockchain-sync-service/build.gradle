buildscript {
	ext {
		kotlinVersion = '1.3.11'
		springBootVersion = '2.1.1.RELEASE'
		gradleDockerVersion = '0.21.0'
	}
	repositories {
		mavenCentral()
		maven {
			url = uri("https://plugins.gradle.org/m2/")
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
		classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradleDockerVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.decent.t4h'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

bootJar {
	baseName = 't4h-sync-service'
	version =  '1.0.0'
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
	google()
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
	implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	implementation('org.postgresql:postgresql')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('com.github.DECENTfoundation:DCoreKt-SDK:2.2.3')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

apply plugin: 'com.palantir.docker'

task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependency")
}

docker {
	name "${System.getenv('DOCKER_NAME')}"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}